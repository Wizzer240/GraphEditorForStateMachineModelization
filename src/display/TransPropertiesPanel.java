package display;

/*
 Copyright 2007 Zimmer Design Services.
 Written by Michael Zimmer - mike@zimmerdesignservices.com
 Copyright 2014 Jean-Baptiste Lespiau jeanbaptiste.lespiau@gmail.com

 This file is part of Fizzim.

 Fizzim is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.

 Fizzim is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.table.TableColumn;

import locale.UTF8Control;
import attributes.EnumVisibility;
import attributes.GlobalAttributes;
import attributes.ObjAttribute;
import entities.GeneralObjType;
import entities.StateObj;
import entities.StateTransitionObj;
import entities.TransitionObj;
import gui.GeneralEditorWindow;

@SuppressWarnings("serial")
public class TransPropertiesPanel extends JPanel {
  private static final ResourceBundle locale =
      ResourceBundle.getBundle("locale.Editors", new UTF8Control());

  private TransitionObj trans;
  private DrawArea drawArea;
  private StateObj start;
  private StateObj end;
  private StateObj pref;
  private Vector<StateObj> stateObjs;
  boolean loopback = false;
  boolean stub = false;
  private GlobalAttributes globalList;
  private JDialog parent_window;
  private Component window = this;
  private JColorChooser colorChooser;
  private JButton TPDelete;
  private JLabel TPLabel;
  private JButton TPNew;
  private JScrollPane TPScroll;
  private JTable TPTable;
  private JComboBox jComboBox1;
  private JComboBox jComboBox2;
  private JLabel jLabel1;
  private JLabel jLabel2;
  private JLabel jLabel3;
  private JCheckBox jCheckBox1;

  /**
   * This function allows to get the inner JTable in order to create advanced
   * event management. Normal user should not need this.
   * 
   * @return The properties table associated to the current panel
   */
  public JTable getTable() {
    return TPTable;
  }

  // End of variables declaration//GEN-END:variables
  /** Creates new form TransP */
  public TransPropertiesPanel(GeneralEditorWindow parent_window, DrawArea DA,
      TransitionObj t, Vector<StateObj> states, boolean is_loopback,
      StateObj state) {
    // super(parent, modal);
    trans = t;
    drawArea = DA;
    stateObjs = states;
    loopback = is_loopback;
    pref = state;
    globalList = drawArea.getGlobalList();
    colorChooser = drawArea.getColorChooser();
    if (trans.getType() == GeneralObjType.TRANSITION) {
      StateTransitionObj t1 = (StateTransitionObj) t;
      stub = t1.getStub();
    }
    this.parent_window = parent_window;
    initComponents();
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // GEN-BEGIN:initComponents
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
  private void initComponents() {
    TPLabel = new JLabel();
    TPScroll = new JScrollPane();
    TPTable = new JTable();
    TPNew = new JButton();
    TPDelete = new JButton();
    jLabel1 = new JLabel();
    jLabel2 = new JLabel();
    jLabel3 = new JLabel();
    jComboBox1 = new JComboBox();
    jComboBox2 = new JComboBox();
    jCheckBox1 = new JCheckBox();

    if (!loopback) {
      // setTitle("Edit State Transition Properties");
      TPLabel.setText(locale.getString("trans_editor_text"));
    } else {
      // setTitle("Edit Loopback Transition Properties");
      TPLabel.setText(locale.getString("trans_editor_text_loopback"));
    }
    TPTable
        .setModel(new AttributesTableModel(trans, parent_window, globalList));
    TPTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

    // use dropdown boxes
    EnumVisibility[] options = EnumVisibility.values();
    TableColumn column = TPTable.getColumnModel().getColumn(2);
    column.setCellEditor(new MyJComboBoxEditor(options));

    column = TPTable.getColumnModel().getColumn(5);
    column.setPreferredWidth(TPTable.getRowHeight());
    column.setCellEditor(new MyJColorEditor(colorChooser));
    column.setCellRenderer(new MyJColorRenderer());
    TPNew.setVisible(false);
    TPDelete.setVisible(false);

    TPScroll.setViewportView(TPTable);

    TPNew.setText("New");
    TPNew.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        TPNewActionPerformed(evt);
      }
    });

    TPDelete.setText("Delete");
    TPDelete.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        TPDeleteActionPerformed(evt);
      }
    });

    if (!loopback) {
      jLabel1.setText(locale.getString("trans_editor_start_cell_text"));
      jLabel2.setText(locale.getString("trans_editor_end_cell_text"));
    } else {
      jLabel1.setText(locale.getString("trans_editor_cell_text"));
      jLabel2.setVisible(false);
      jCheckBox1.setVisible(false);
    }

    jLabel3.setPreferredSize(new Dimension(50, 20));
    jLabel3.setMinimumSize(new Dimension(50, 20));
    jLabel3.setOpaque(true);
    jLabel3.setVisible(true);

    // set background color to color of transition and add action listener
    jLabel3.setBackground(trans.getColor());
    jLabel3.setBorder(new LineBorder(Color.black, 1));
    jLabel3.addMouseListener(new MouseListener() {

      ActionListener colorSel = new ActionListener() {
        public void actionPerformed(ActionEvent arg0) {
          jLabel3.setBackground(colorChooser.getColor());
          trans.setColor(colorChooser.getColor());
        }
      };

      public void mouseClicked(MouseEvent e)
      {
        JDialog dialog;
        dialog = JColorChooser.createDialog(window,
            locale.getString("edit_choose_color"),
            true, colorChooser, colorSel, null);
        dialog.setVisible(true);
      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mouseExited(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
      }

      public void mouseReleased(MouseEvent e) {
      }
    });

    int size = stateObjs.size();

    jComboBox1.setModel(new DefaultComboBoxModel(stateObjs));
    if (trans.getStartState() == null) {

      if (!loopback) {
        jComboBox1.setSelectedIndex(size - 2);
        start = stateObjs.get(size - 2);
      } else {
        if (pref == null)
        {
          jComboBox1.setSelectedIndex(size - 1);
          start = stateObjs.get(size - 1);
        } else {
          int index = 0;
          for (int i = 0; i < stateObjs.size(); i++) {
            if (stateObjs.get(i).equals(pref)) {
              index = i;
              break;
            }
          }
          jComboBox1.setSelectedIndex(index);
          start = pref;
        }

      }

    }
    else
    {
      start = trans.getStartState();
      jComboBox1.setSelectedIndex(stateObjs.indexOf(start));
    }
    if (!loopback)
    {
      jComboBox2.setModel(new DefaultComboBoxModel(stateObjs));
      if (trans.getEndState() == null)
      {
        jComboBox2.setSelectedIndex(size - 1);
        end = stateObjs.get(size - 1);
      }
      else
      {
        end = trans.getEndState();
        jComboBox2.setSelectedIndex(stateObjs.indexOf(end));
      }
    }
    else
      jComboBox2.setVisible(false);

    jComboBox1.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        StartStateActionPerformed(evt);
      }
    });

    if (!loopback)
    {
      jComboBox2.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
          EndStateActionPerformed(evt);
        }
      });
    }

    if (!loopback)
    {
      jCheckBox1.setText("Stub?");
      jCheckBox1.setSelected(stub);
      jCheckBox1.setBorder(BorderFactory.createEmptyBorder(0, 0,
          0, 0));
      jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
    }

    GroupLayout layout = new GroupLayout(this);
    layout.setHorizontalGroup(layout
        .createParallelGroup(Alignment.LEADING)
        .addGroup(layout
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(TPScroll, GroupLayout.DEFAULT_SIZE, 636,
                        Short.MAX_VALUE)
                    .addComponent(TPLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout
                            .createParallelGroup(Alignment.LEADING, false)
                            .addGroup(layout
                                .createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(
                                    ComponentPlacement.RELATED,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE)
                                .addComponent(jComboBox2,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout
                                .createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(
                                    ComponentPlacement.RELATED,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE)
                                .addComponent(jComboBox1,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout
                                .createSequentialGroup()
                                .addComponent(TPNew)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(TPDelete)))
                        .addGroup(layout
                            .createParallelGroup(Alignment.LEADING)
                            .addGroup(layout
                                .createSequentialGroup()
                                .addGap(42)
                                .addComponent(jLabel3,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42)
                                .addComponent(jCheckBox1)))
                        .addGap(174)))
            .addContainerGap())
        );
    layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(TPLabel)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(TPScroll, GroupLayout.PREFERRED_SIZE, 151,
                GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                .addComponent(TPNew)
                .addComponent(TPDelete))
            .addGap(22)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jComboBox1,
                    GroupLayout.PREFERRED_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jComboBox2,
                    GroupLayout.PREFERRED_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBox1))
            .addContainerGap())
        );
    setLayout(layout);
    // pack();
  }

  private void StartStateActionPerformed(ActionEvent evt) {
    JComboBox cb = (JComboBox) evt.getSource();
    StateObj selState = (StateObj) cb.getSelectedItem();
    start = selState;

  }

  private void EndStateActionPerformed(ActionEvent evt) {
    JComboBox cb = (JComboBox) evt.getSource();
    StateObj selState = (StateObj) cb.getSelectedItem();
    end = selState;
  }

  private void TPDeleteActionPerformed(ActionEvent evt) {
    // delete selected rows
    int[] rows = TPTable.getSelectedRows();
    for (int i = rows.length - 1; i > -1; i--) {
      int type = trans.getAttributeList().get(rows[i]).getEditable(0);
      if (type != ObjAttribute.GLOBAL_FIXED && type != ObjAttribute.ABS) {
        trans.getAttributeList().remove(rows[i]);
        TPTable.revalidate();
      } else {
        JOptionPane.showMessageDialog(this,
            locale.getString("edit_cannot_delete_attr_error"),
            locale.getString("error"),
            JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  public void TPCancelActionPerformed(ActionEvent evt) {
    drawArea.cancel();
    parent_window.dispose();
  }

  public void TPOKActionPerformed(ActionEvent evt) {
    TPTable.editCellAt(0, 0);
    if (drawArea.checkTransNames()) {
      if (!loopback) {
        if (start != end)
          trans.initTrans(start, end);
        boolean b = jCheckBox1.isSelected();
        if (b != stub) {
          if (trans.getType() == GeneralObjType.TRANSITION) {
            StateTransitionObj t1 = (StateTransitionObj) trans;
            t1.setStub(b);
          }
        }

        if (start != end) {

          drawArea.commitUndo();
          parent_window.dispose();
        } else {
          JOptionPane.showMessageDialog(this,
              locale.getString("trans_different_states_error"),
              locale.getString("error"),
              JOptionPane.ERROR_MESSAGE);
        }
      } else {
        trans.initTrans(start);
        drawArea.commitUndo();
        parent_window.dispose();
      }
    } else {
      JOptionPane.showMessageDialog(this,
          locale.getString("trans_different_state_error"),
          locale.getString("error"),
          JOptionPane.ERROR_MESSAGE);
    }
  }

  private void TPNewActionPerformed(ActionEvent evt) {
    ObjAttribute newObj =
        new ObjAttribute("", "", EnumVisibility.NO, "", "", Color.black, "", "");
    trans.getAttributeList().addLast(newObj);
    TPTable.revalidate();
  }

}